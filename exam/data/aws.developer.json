[
    {
        "question": "A developer is creating a Ruby application and needs to automate the deployment, scaling, and management of an environment without requiring knowledge of the underlying infrastructure. Which service would best accomplish this task?",
        "answer": "AWS Elastic Beanstalk"
    },
    {
        "question": "A company is offering APIs as a service over the internet to provide unauthenticated read access to statistical information that is updated daily. The company uses Amazon API Gateway and AWS Lambda to develop the APIs. The service has become popular, and the company wants to enhance the responsiveness of the APIs. Which action can help the company achieve this goal?",
        "answer": "Enable API caching in API Gateway"
    },
    {
        "question": "A company has an AWS Lambda function that processes incoming requests from an Amazon API Gateway API. The API calls the Lambda function by using a Lambda alias. A developer updated the Lambda function code to handle more details related to the incoming requests. The developer wants to deploy the new Lambda function for more testing by other developers with no impact to customers that use the API. Which solution will meet these requirements with the LEAST operational overhead?",
        "answer": "Create a new version of the Lambda function. Create and deploy a second Lambda function to filter incoming requests from API Gateway. If the filtering Lambda function detects a test request, the filtering Lambda function will invoke the new Lambda version of the code. For other requests, the filtering Lambda function will invoke the old Lambda version. Update the API Gateway API to use the filtering Lambda function."
    },
    {
        "question": "A developer wants to use AWS Elastic Beanstalk to test a new version of an application in a test environment. Which deployment method offers the FASTEST deployment?",
        "answer": "All at once"
    },
    {
        "question": "An ecommerce website uses an AWS Lambda function and an Amazon RDS for MySQL database for an order futfillment service. The service needs to return order confirmation immediately. During a marketing campaign that caused an increase in the number of orders, the website's operations team noticed errors for too many connections? from Amazon RDS. However, the RDS DB cluster metrics are healthy. CPU and memory capacity are still available. What should a developer do to resolve the errors?",
        "answer": "Initialize the database connection outside the handler function. Increase the max_user_connections value on the parameter group of the DB cluster. Restart the DB cluster."
    },
    {
        "question": "An application that is hosted on an Amazon EC2 instance needs access to files that are stored in an Amazon S3 bucket. The application lists the objects that are stored in the S3 bucket and displays a table to the user. During testing, a developer discovers that the application does not show any objects in the list. What is the MOST secure way to resolve this issue?",
        "answer": "Update the IAM instance profile that is attached to the EC2 instance to include the S3:ListBucket permission for the S3 bucket."
    },
    {
        "question": "A software company is launching a multimedia application. The application will allow guest users to access sample content before the users decide if they want to create an account to gain full access. The company wants to implement an authentication process that can identify users who have already created an account. The company also needs to keep track of the number of guest users who eventually create an account. Which combination of steps will meet these requirements?",
        "answer": "Create an Amazon Cognito identity pool. Configure the identity pool to allow unauthenticated users. Exchange unique identity for temporary credentials that allow all users to assume a role.<br/>Allow all users to access the sample content by default. Create a role for authenticated users that allows access to the other content."
    },
    {
        "question": "A developer is deploying a new application to Amazon Elastic Container Service (Amazon ECS). The developer needs to securely store and retrieve different types of variables. These variables include authentication information for a remote API, the URL for the API, and credentials. The authentication information and API URL must be available to all current and future deployed versions of the application across development, testing, and production environments. How should the developer retrieve the variables with the FEWEST application changes?",
        "answer": "Update the application to retrieve the variables from AWS Key Management Service (AWS KMS). Store the API URL and credentials as unique keys for each environment."
    },
    {
        "question": "A development team wants to build a continuous integrationlcontinuous delivery (Cl/CD) pipeline. The team is using AWS CodePipeline to automate the code build and deployment. The team wants to store the program code to prepare for the Cl/CD pipeline. Which AWS service should the team use to store the program code?",
        "answer": "AVVS CodeCommit"
    },
    {
        "question": "A developer has an application that stores data in an Amazon S3 bucket. The application uses an HTTP API to store and retrieve objects. When the PutObject API operation adds objects to the S3 bucket, the developer must encrypt these objects at rest by using server-side encryption with Amazon S3 managed keys (SSE-S3). Which solution will meet this requirement?",
        "answer": "Set the x-amz-server-side-encryption header when invoking the PutObject API operation."
    },
    {
        "question": "A developer has a legacy application that is hosted on-premises. Other applications hosted on AWS depend on the on-premises application for proper functioning. In case of any application errors, the developer wants to be able to use Amazon CloudWatch to monitor and troubleshoot all applications from one place. How can the developer accomplish this?",
        "answer": "Download the CloudWatch agent to the on-premises server. Configure the agent to use IAM user credentials with permissions for CloudWatch."
    },
    {
        "question": "A developer maintains an Amazon API Gateway REST API. Customers use the API through a frontend UI and Amazon Cognito authentication. The developer has a new version of the API that contains new endpoints and backward-incompatible interface changes. The developer needs to provide beta access to other developers on the team without affecting customers. Which solution will meet these requirements with the LEAST operational overhead?",
        "answer": "A Define a development stage on the API Gateway API. Instruct the other developers to point the endpoints to the development stage"
    },
    {
        "question": "A developer is creating a mobile app that calls a backend service by using an Amazon API Gateway REST API. For integration testing during the development phase, the developer wants to simulate different backend responses without invoking the backend service. Which solution will meet these requirements with the LEAST operational overhead?",
        "answer": "Create an Amazon EC2 instance that serves the backend REST API by using an AWS CloudFormation template"
    },
    {
        "question": "An application uses Lambda functions to extract metadata from files uploaded to an S3 bucket; the metadata is stored in Amazon DynamoDB. The application starts behaving unexpectedly, and the developer wants to examine the logs of the Lambda function code for errors. Based on this system configuration, where would the developer find the logs?",
        "answer": "Amazon CloudWatch"
    },
    {
        "question": "A developer is integrating Amazon ElastiCache in an application. The cache will store data from a database. The cached data must populate real-time dashboards. Which caching strategy will meet these requirements?",
        "answer": "A write-through cache"
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    },
    {
        "question": "",
        "answer": ""
    }
]